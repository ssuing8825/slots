parameters:
  subscription: "NOT_DEFINE"
  environment: "NOT_DEFINE"
  webAppName: "NOT_DEFINE"
  funcAppName: "NOT_DEFINE"
  subId : "NOT_DEFINE"

# resources:
#   repositories:
#   - repository: slotsGitHub # The name used to reference this repository in the checkout step
#     type: github
#     endpoint: ssuing8825
#     name: MyGitHubOrgOrUser/MyGitHubRepo

steps:
  - checkout: self

  - task: AzureCLI@2
    displayName: "Setup Auth for Terraform"
    inputs:
      azureSubscription: "${{ parameters.subscription }}"
      addSpnToEnvironment: true
      scriptLocation: inlineScript
      scriptType: pscore
      failOnStandardError: "true"
      inlineScript: |
        az account set --subscription "${{ parameters.subId }}"
        Write-Host "##vso[task.setvariable variable=ARM_SUBSCRIPTION_ID]$(az account show --query="id" -o tsv)"
        Write-Host "##vso[task.setvariable variable=ARM_CLIENT_ID]$($env:servicePrincipalId)"
        Write-Host "##vso[task.setvariable variable=ARM_CLIENT_SECRET]$($env:servicePrincipalKey)"
        Write-Host "##vso[task.setvariable variable=ARM_TENANT_ID]$(az account show --query="tenantId" -o tsv)"

  - task: AzurePowerShell@4
    displayName: "Writing out Directory information"
    inputs:
      azureSubscription: 'SlotsAppDevOps_ServicePrinciple'
      ScriptType: 'InlineScript'
      Inline: |
        Write-Host "Hello World from $Env:AGENT_NAME."
        Write-Host "My ID is $Env:AGENT_ID."
        Write-Host "My Client ID is $Env:ARM_CLIENT_SECRET."
        Write-Host "AGENT_WORKFOLDER contents:"
        gci $Env:AGENT_WORKFOLDER
        Write-Host "AGENT_BUILDDIRECTORY contents:"
        gci $Env:AGENT_BUILDDIRECTORY
        Write-Host "BUILD_SOURCESDIRECTORY contents:"
        gci $Env:BUILD_SOURCESDIRECTORY
        Write-Host "Over and out." 
      azurePowerShellVersion: 'LatestVersion'

  - task: AzureCLI@2
    displayName: "Deploy Infrastructure with Terraform"
    inputs:
      azureSubscription: "${{ parameters.subscription }}"
      scriptType: pscore
      scriptPath: $(Build.SourcesDirectory)/terraform/init/deploy.ps1
      arguments: "-Environment ${{ parameters.environment }} -Verbose"
    env:
      TF_VAR_subscription_id: $(ARM_SUBSCRIPTION_ID)
      TF_VAR_client_id: $(ARM_CLIENT_ID)
      TF_VAR_client_secret: $(ARM_CLIENT_SECRET)
      TF_VAR_tenant_id: $(ARM_TENANT_ID)

  - task: PowerShell@2
    displayName: Subscription to be Deployed To
    inputs:
      targetType: "inline"
      script: 'Write-Host "This is the Subscription to be deployed to: " ${{ parameters.subId }}'

  - task: DownloadPipelineArtifact@2
    displayName: Download the Pipeline Artifact from Build
    inputs:
      artifact: SlotsFuncApp
      path: $(Build.SourcesDirectory)

  - task: AzureFunctionApp@1
    displayName: "Deploy Slots Azure Function"
    inputs:
      azureSubscription: "${{ parameters.subscription }}"
      appType: functionApp
      appName: "${{ parameters.funcAppName }}"
      package: $(Build.SourcesDirectory)/**/*.zip

  - task: PowerShell@2
    displayName: "Install Powershell Modules Needed"
    inputs:
      targetType: "inline"
      script: |
        Install-Module -Name Az.Accounts -Force -Scope CurrentUser
        Install-Module -Name Az.KeyVault -Force -Scope CurrentUser
        Install-Module -Name Az.CosmosDB -Force -Scope CurrentUser
        Install-Module -Name Az.Functions -Force -Scope CurrentUser

  # - task: PowerShell@2
  #   displayName: Parameters used for Deployment
  #   inputs:
  #     targetType: "inline"
  #     script: 'Write-Host "Function App Name : $(FunctionAppName) Vault Name : $(VaultName) Resource Group Name : $(ResourceGroupName) Cosmos Database :  $(CosmosDBName) Environment : $(Environment)"'
